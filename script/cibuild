#!/bin/bash

set -e

GITHUB_REPO='https://api.github.com/repos/farmenvy/client'

set_github_status() {
  local status=${1:-pending}

  if [ -n "$GITHUB_ACCESS_TOKEN" ]
  then
    curl -sS "$GITHUB_REPO/statuses/$GIT_COMMIT?access_token=$GITHUB_ACCESS_TOKEN" \
      -H "Content-Type: application/json" \
      -X POST \
      -d "{\"state\": \"$status\", \"description\": \"Jenkins\", \"target_url\": \"$JENKINS_URL/job/$JOB_NAME/$BUILD_NUMBER/console\"}"
  fi
}


title() {
  echo
  echo "===== $* ====="
  echo
}

info() {
  echo "+-- $*"
}

step() {
  echo "---> $*"
  eval "$*" || abort "$*"
  echo "OK"
}

cleanup() {
  echo '---> pruning docker stuff'
  docker stop $(docker ps -aq) > /dev/null
  docker system prune -f
  echo
  echo '***DONE***'
}

abort() {
  echo
  echo "!!! FAILURE: '$*'"
  title 'setting github status to failure'
  set_github_status 'failure' > /dev/null
  step
  cleanup
  echo "!!! FAILED: '$*'"
  exit 1
}

VERSION_FILE_PATH='./api/VERSION'

title 'setting github status to pending'
step 'set_github_status pending > /dev/null'

title 'creating staging client docker image'
STAGING_DOCKER_CLIENT="farmenvy/client:staging"
step docker build -t "$STAGING_DOCKER_CLIENT" client

title 'running static analysis on client'
step docker run --rm "$STAGING_DOCKER_CLIENT" \
  ./node_modules/.bin/eslint ./src

# PLEASE CHANGE ME!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# GIT_BRANCH='origin/master'
title 'making client production build'
if [ "$GIT_BRANCH" = 'origin/master' ]
then
  DEPLOYABLE=true
  info 'on deployable branch'
  info 'adding client production build to public directory'
  step docker run --rm -v ${PWD}/public/:/usr/src/app/build \
    "$STAGING_DOCKER_CLIENT" yarn build
else
  DEPLOYABLE=false
  info 'not a deployable branch'
fi



if [ "$DEPLOYABLE" == true ]
then
  title 'creating production docker image'
  # is there a version bump?
  if ! git diff-index --quiet origin/master^ -- "$VERSION_FILE_PATH"; then
    DEPLOYING_TO=production
  else
    DEPLOYING_TO=staging
  fi

  if [ "$DEPLOYING_TO" == 'production' ]
  then
    info 'deploying to production -- checking version file.'
    DOCKER_TAG=$(cat "$VERSION_FILE_PATH")
  else
    info 'not deploying to production -- using build number for docker tag'
    DOCKER_TAG=${BUILD_NUMBER:-unspecified}
  fi

else
  title 'creating development docker image'
  DOCKER_TAG=notdeploying
  DOCKER_ARGS="-f config/docker/development/Dockerfile"
fi

DOCKER_IMAGE="farmenvy/dotcom:$DOCKER_TAG"
step docker build -t "$DOCKER_IMAGE" "$DOCKER_ARGS" .

title 'running static analysis on API'
step docker run -w /home/app/webapp $DOCKER_IMAGE bundle exec rubocop app

title 'creating staging postgres container'
step docker run --rm --name my-postgres -d postgres:latest

title 'running API tests'
step docker run --link my-postgres:postgres \
  -e RAILS_ENV=test \
  $DOCKER_IMAGE /sbin/my_init -- \
  bundle exec rspec spec

if [ "$DEPLOYABLE" == true ]
then
  if [ "$DEPLOYING_TO" == production ]
  then
    TARGET_IP=$PRODUCTION_IP_ADDRESS
  else
    TARGET_IP=$STAGING_IP_ADDRESS
  fi

  title 'publishing docker image'

  if [ "$DOCKER_TAG" == 'unspecified' ]
  then
    abort "trying to push unspecified image to docker hub!"
  else
    step docker push "$DOCKER_IMAGE"
  fi

  title 'deploy'
  info "deploying to $DEPLOYING_TO @ $TARGET_IP"
  CANARY_PORT=8675
  PROD_PORT=80

  docker pull "$DOCKER_IMAGE"

  # Test out latest image
  docker run -dit --name "$DOCKER_TAG" --restart unless-stopped --rm \
    -p "$CANARY_PORT":80 -e RAILS_ENV=production -e DATABASE_URL="$DATABASE_URL" \
    "$DOCKER_IMAGE"

  curl --silent --show-error --fail "$TARGET_IP/canary:$CANARY_PORT"

  # stop all containers
  docker stop $(docker ps -aq)

  # This time for realz
  docker run -dit --name "$DOCKER_TAG" --restart unless-stopped --rm \
    -p "$PROD_PORT":80 -e RAILS_ENV=production -e DATABASE_URL="$DATABASE_URL" \
    "$DOCKER_IMAGE"


  curl --silent --show-error --fail "$TARGET_IP/canary:$PROD_PORT"

  # pull latest docker image
  # run latest docker image map to new port like 8675:80
  # run canary check on that port
  # stop latest container
  # stop old container
  # run latest container mapped now to port 80:80
  # run canary check
  # ssh to prod
#   ssh "root@$TARGET_IP" <<EOF
#
# EOF



fi

title 'setting github status to success'
step 'set_github_status success > /dev/null'

cleanup

echo "SUCCESS!"
