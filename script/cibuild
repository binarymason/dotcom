#!/bin/bash

set -e

# ensure we're at project root
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}"  )" && pwd  )"
cd "$DIR/.."

export STAGING_IP=$(/bin/bash ./script/determine-staging)
export CONSOLE_URL="$JENKINS_URL/job/$JOB_NAME/$BUILD_NUMBER/console"
DEPLOY_LOG=deploy.log

title() {
  echo "---> $*"
}

info() {
  echo "+ $*"
}

cleanup() {
  info '*** performing cleanup ***'
  info 'pruning docker stuff'
  ci-compose stop
  ci-compose down
  docker system prune --filter "until=6h" -f

  info 'removing deploy log'
  rm -f "$DEPLOY_LOG"

  info 'pruning git stuff'
  git tag -l | xargs git tag -d
  git remote prune origin

  info '*** DONE ***'

  echo "=== $RUN_STATUS ==="
}

trap "cleanup" EXIT

abort() {
  RUN_STATUS=failure
  info "!!! FAILED: '$*'" >&2

  if [ "$DEPLOYABLE" == true ]; then
    ./script/slack-notify
  fi

  ./script/set-github-status 'failure'
  exit 1
}


step() {
  title "$*"
  eval "$*" || abort "$*"
  info "OK"
}

ci-compose() {
  docker-compose -f ci.yml "$@"
}

if [[ "$GIT_BRANCH" =~ .*/master$ ]];
then
  info 'Master branch received. Deployable.'
  DEPLOYABLE=true
else
  DEPLOYABLE=false
fi

step ./script/set-github-status 'pending'

step ci-compose build
step ci-compose run --rm client ./node_modules/.bin/eslint ./src
step ci-compose run --rm api bin/setup
step ci-compose run --rm api rubocop .
step ci-compose run --rm api rspec spec

title 'release to production'

info 'inspecting HEAD with latest tag'
latest_tag_sha="$(git rev-list --tags --max-count=1)"
info "latest tag sha is: $latest_tag_sha"
if test -n "$(git diff HEAD..$latest_tag_sha --name-only | grep '^STAGING')"; then
  info 'STAGING file has been changed!'
  STAGING_CHANGE=true
else
  info 'STAGING file has not changed.'
  STAGING_CHANGE=false
fi

if [ "$DEPLOYABLE" == true ]
then
  if [ "$STAGING_CHANGE" == true ]
  then
    info 'making a release...'
    step ./script/release
  else
    info 'skipping release'
  fi
else
  if [ "$STAGING_CHANGE" == true ]
  then
    info "linting STAGING file"
    step ./script/lint-staging-file
  fi
fi

title 'deploy to staging'
if [ "$DEPLOYABLE" == true ]
then
  info "adding $STAGING_IP as known host"
  step "ssh-keygen -R $STAGING_IP"
  step "ssh-keyscan $STAGING_IP >> ~/.ssh/known_hosts"

  info 'setting staging remote'
  step 'git remote remove staging &>/dev/null || true'
  step git remote add staging "deploy@$STAGING_IP:farmenvy/dotcom.git"

  step "git push --force staging HEAD:master | tee $DEPLOY_LOG"

  info 'checking for any deploy errors'
  if grep -E 'error|critical|kill' $DEPLOY_LOG; then
    echo 'Deploy failed!'
    exit 1
  fi

  step ./script/healthcheck "$STAGING_IP"
  step ./script/slack-notify 'success'
else
  info "Not a deployable branch."
fi

step ./script/set-github-status 'success'
