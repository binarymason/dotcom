#!/bin/bash

set -e

GITHUB_REPO='https://api.github.com/repos/farmenvy/client'

set_github_status() {
  local status=${1:-pending}

  if [ -n "$GITHUB_ACCESS_TOKEN" ]
  then
    curl -sS "$GITHUB_REPO/statuses/$GIT_COMMIT?access_token=$GITHUB_ACCESS_TOKEN" \
      -H "Content-Type: application/json" \
      -X POST \
      -d "{\"state\": \"$status\", \"description\": \"Jenkins\", \"target_url\": \"$JENKINS_URL/job/$JOB_NAME/$BUILD_NUMBER/console\"}"
  fi
}


title() {
  echo
  echo "===== $* ====="
  echo
}


step() {
  echo "---> $*"
  eval "$*" || abort "$*"
  echo "OK"
}

cleanup() {
  echo '---> pruning docker stuff'
  docker stop $(docker ps -aq) > /dev/null
  docker system prune -f
  echo
  echo '***DONE***'
}

abort() {
  echo
  echo "!!! FAILURE: '$*'"
  title 'setting github status to failure'
  set_github_status 'failure' > /dev/null
  step
  cleanup
  echo "!!! FAILED: '$*'"
  exit 1
}

title 'setting github status to pending'
step set_github_status 'pending' > /dev/null


title 'creating staging client docker image'
STAGING_DOCKER_CLIENT="farmenvy/client:staging"
step docker build -t "$STAGING_DOCKER_CLIENT" client

title 'running static analysis on client'
step docker run --rm "$STAGING_DOCKER_CLIENT" \
  ./node_modules/.bin/eslint ./src

GIT_BRANCH='origin/master'
if [ "$GIT_BRANCH" = 'origin/master' ]
then
  echo '+-- on deployable branch'

  # changes to client?
  if ! git diff-index --quiet origin/master^ -- client
  then
    echo '+-- found changes made to client'
    title 'adding client production build to public directory'
    step docker run --rm -v {$PWD}/api/public:client/build \
      "$STAGING_DOCKER_CLIENT" yarn build
  else
    echo '+-- no changes made to client'
  fi
else
  echo '+-- not a deployable branch'
fi

title 'verifying contents of public directory'

title 'creating production docker image'
DOCKER_TAG=${BUILD_NUMBER:-unspecified}
DOCKER_IMAGE="farmenvy/dotcom:$DOCKER_TAG"
step docker build -t "$DOCKER_IMAGE" .

title 'running static analysis on API'
step docker run -w /home/app/webapp $DOCKER_IMAGE bundle exec rubocop app

title 'creating staging postgres container'
step docker run --rm --name my-postgres -d postgres:latest

title 'running API tests'
step docker run --link my-postgres:postgres \
  -e RAILS_ENV=test \
  $DOCKER_IMAGE /sbin/my_init -- \
  bundle exec rspec spec

title 'setting github status to success'
step set_github_status 'success' > /dev/null

cleanup
